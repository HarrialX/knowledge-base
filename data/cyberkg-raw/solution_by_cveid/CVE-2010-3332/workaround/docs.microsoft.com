Original Source:
https://docs.microsoft.com/en-us/security-updates/securitybulletins/2010/ms10-070

Workarounds for ASP.NET Padding Oracle Vulnerability - CVE-2010-3332
Workaround refers to a setting or configuration change that does not correct the underlying vulnerability but would help block known attack vectors before you apply the update. Microsoft has tested the following workarounds and states in the discussion whether a workaround reduces functionality:

Enable a UrlScan or Request Filtering rule, enable ASP.NET custom errors, and map all error codes to the same error page
Enabling the customErrors feature of ASP.NET and explicitly configuring applications to always return the same error page, regardless of the error encountered on the server, can make it more difficult for an attacker using the current exploit to distinguish between the different types of errors that occur on a server.
On systems using the .NET Framework version 3.5 Service Pack 1 and above, the workaround provides further protection by also helping to protect against the timing attack portion of the current exploit. The workaround uses the redirectMode="ResponseRewrite" option in the customErrors feature, and introduces a random delay in the error page. These approaches work together to make it more difficult for an attacker to deduce the type of error that occurred on the server by measuring the time it took to receive the error.
Additionally, this workaround requires blocking requests that specify the application error path on the querystring. This can be done using URLScan, a free tool for Internet Information Services (IIS) that can selectively block requests based on rules defined by the administrator. If your system is running Internet Information Services (IIS) on Windows Vista Service Pack 2, Windows Server 2008 Service Pack 2, Windows 7, or Windows Server 2008 R2, you can alternatively use the Request Filtering feature.
Block requests that modify ASP.Net application error path on the request querystring
Using UrlScan:

Download and install UrlScan 3.1. For further instructions on configuring and using UrlScan, see UrlScan 3 Reference.

Modify UrlScan.ini (found in %windir%\system32\inetsrv\urlscan). Insert the following line under the [DenyQueryStringSequences] section of the Urlscan.ini file:


aspxerrorpath=
After you do so, the [DenyQueryStringSequences] section should look similar to this (additional lines in the section are okay and do not affect the workaround):
[DenyQueryStringSequences]
aspxerrorpath=


Run iisreset from a command prompt while logged in as an administrator.

Using IIS request filtering:
These instructions are an alternative for the UrlScan instructions above for systems running IIS on Windows Vista Service Pack 2, Windows Server 2008 Service Pack 2, Windows 7, or Windows Server 2008 R2.

Install the Request Filtering feature in IIS through either Add/Remove Programs or Role Manger by selecting the feature under Internet Information Services, World Wide Web Services, Security.

Launch Internet Information Services (IIS) Manager.

Select the server node in the left pane.

Double-click Request Filtering.

Select the Query Strings tab and click Deny Query String â€¦ in the Actions pane.

Enter aspxerrorpath= in the dialog box and select OK.


Alternatively, you can also use the following appcmd command to set this request querystring:
appcmd set config /section:requestfiltering /+denyQueryStringSequences.[sequence='aspxerrorpath=']
For more information on using appcmd to configure IIS, see Getting Started with AppCmd.exe.
Configure ASP.Net applications to use uniform custom errors
In the root folder of each ASP.NET web application, determine if you already have a web.config file in this folder. You must have rights to create a file in the target directory to implement this workaround.
If the ASP.NET application does not have a web.config file:
On .NET Framework 3.5 and earlier

Create a text file named web.config in the root folder of the ASP.NET application, and insert the following contents:

<configuration>
<location allowOverride="false">
<system.web>
<customErrors mode="On" defaultRedirect="~/error.html" />
</system.web>
</location>
</configuration>


Create a text file named error.html containing a generic error message and save it in the root folder of the ASP.NET application.

Alternatively, you can rename error.html in the web.config file to point to an existing error page, but that page must display generic content, not context-specific content.


On .NET Framework 3.5 Service Pack 1 and later

Create a text file named web.config in the root folder of the ASP.NET application, and insert the following contents:

<configuration>
<location allowOverride="false">
<system.web>
<customErrors mode="On" redirectMode="ResponseRewrite" defaultRedirect="~/ErrorPage.aspx" />
</system.web>
</location>
</configuration>


If you are comfortable using C#, we recommend using the following ErrorPage.aspx file:

<%@ Page Language="C#" AutoEventWireup="true" %>
<%@ Import Namespace="System.Security.Cryptography" %>
<%@ Import Namespace="System.Threading" %>

<script runat="server">
void Page_Load() {
byte[] delay = new byte[1];
RandomNumberGenerator prng = new RNGCryptoServiceProvider();

prng.GetBytes(delay);
Thread.Sleep((int)delay[0]);

IDisposable disposable = prng as IDisposable;
if (disposable != null) { disposable.Dispose(); }
}
</script>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
<title></title>
</head>
<body>
<div>
An error occurred while processing your request.
</div>
</body>
</html>


If you are comfortable using Visual Basic .NET, we recommend using the following ErrorPage.aspx file:

<%@ Page Language="VB" AutoEventWireup="true" %>
<%@ Import Namespace="System.Security.Cryptography" %>
<%@ Import Namespace="System.Threading" %>

<script runat="server">
Sub Page_Load()
Dim delay As Byte() = New Byte(0) {}
Dim prng As RandomNumberGenerator = New RNGCryptoServiceProvider()  

prng.GetBytes(delay)
Thread.Sleep(CType(delay(0), Integer))

Dim disposable As IDisposable = TryCast(prng, IDisposable)
If Not disposable Is Nothing Then
disposable.Dispose()
End If
End Sub
</script>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
<title></title>
</head>
<body>
<div>
An error occurred while processing your request.
</div>
</body>
</html>

If the ASP.NET application already has a web.config file:
On .NET Framework 3.5 RTM and earlier

Insert the bracketed text in the sample below into your existing web.config file:

<?xml version="1.0"?>
<configuration>
<configSections>
...
</configSections>
<appSettings>
...
</appSettings>
<connectionStrings>
...
</connectionStrings>

[<location allowOverride="false">
<system.web>
<customErrors mode="On" defaultRedirect="~/error.html" />
</system.web>
</location>]

<system.web>
...
</system.web>
<system.codedom>
...
</system.codedom>
</configuration>


Create a text file named error.html containing a generic error message and save it in the root folder of the ASP.NET application.

Alternatively, you can rename error.html in the web.config file to point to an existing error page, but that page must display generic content, not context-specific content.


On .NET Framework 3.5 Service Pack 1 and later

Insert the bracketed text in the sample below into your existing web.config file:

<?xml version="1.0"?>
<configuration>
<configSections>
...
</configSections>
<appSettings>
...
</appSettings>
<connectionStrings>
...
</connectionStrings>

[<location allowOverride="false">
<system.web>
<customErrors mode="On" redirectMode="ResponseRewrite" defaultRedirect="~/ErrorPage.aspx" />
</system.web>
</location>]

</configuration>

<system.web>
...
</system.web>
<system.codedom>
...
</system.codedom>
</configuration>


If you are comfortable using C#, we recommend using the following ErrorPage.aspx file:

<%@ Page Language="C#" AutoEventWireup="true" %>
<%@ Import Namespace="System.Security.Cryptography" %>
<%@ Import Namespace="System.Threading" %>    

<script runat="server">
void Page_Load() {
byte[] delay = new byte[1];
RandomNumberGenerator prng = new RNGCryptoServiceProvider();

prng.GetBytes(delay);
Thread.Sleep((int)delay[0]);

IDisposable disposable = prng as IDisposable;
if (disposable != null) { disposable.Dispose(); }
}
</script>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
<title></title>
</head>
<body>
<div>
An error occurred while processing your request.
</div>
</body>
</html>


If you are comfortable using Visual Basic .NET, we recommend using the following ErrorPage.aspx file:

<%@ Page Language="VB" AutoEventWireup="true" %>
<%@ Import Namespace="System.Security.Cryptography" %>
<%@ Import Namespace="System.Threading" %>

<script runat="server">
Sub Page_Load()
Dim delay As Byte() = New Byte(0) {}
Dim prng As RandomNumberGenerator = New RNGCryptoServiceProvider()

prng.GetBytes(delay)
Thread.Sleep(CType(delay(0), Integer))

Dim disposable As IDisposable = TryCast(prng, IDisposable)
If Not disposable Is Nothing Then
disposable.Dispose()
End If
End Sub
</script>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head runat="server">
<title></title>
</head>
<body>
<div>
An error occurred while processing your request.
</div>
</body>
</html>

Impact of Workaround: If an error occurs during a Web transaction, the Web clients will see the same generic error message on the server, regardless of what error actually occurs. Additionally, any requests for Web pages which contain the string aspxerrropath= in the querystring portion of the URL will be blocked, and an HTTP error message returned to the client.


