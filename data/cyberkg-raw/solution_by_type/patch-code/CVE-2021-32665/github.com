Original Source:
https://github.com/wireapp/wire-ios-data-model/commit/bf9db85886b12a20c8374f55b7c4a610e8ae9220

Commit history:

  @@ -173,7 +173,7 @@ extension ZMConversation {
  
   if !addedRoles.isEmpty {
   self.checkIfArchivedStatusChanged(addedSelfUser: addedSelfUser)
-  self.checkIfVerificationLevelChanged(addedUsers: Set(addedRoles.map { $0.user}))
+  self.checkIfVerificationLevelChanged(addedUsers: Set(addedRoles.map { $0.user}),  addedSelfUser: addedSelfUser)
          }
      }
  
  @@ -216,8 +216,13 @@ extension ZMConversation {
          }
      }
  
-  private func checkIfVerificationLevelChanged(addedUsers: Set<ZMUser>) {
-  self.decreaseSecurityLevelIfNeededAfterDiscovering(clients: Set(addedUsers.flatMap { $0.clients }), causedBy: addedUsers)
+  private func checkIfVerificationLevelChanged(addedUsers: Set<ZMUser>, addedSelfUser: Bool) {
+  let clients = Set(addedUsers.flatMap { $0.clients })
+  self.decreaseSecurityLevelIfNeededAfterDiscovering(clients: clients, causedBy: addedUsers)
+ 
+  if addedSelfUser {
+  self.increaseSecurityLevelIfNeededAfterTrusting(clients: clients)
+         }
      }
  
   /// Remove participants to the conversation. The method will decide on its own whether
  
  @@ -206,11 +206,13 @@ extension ZMConversation {
      }
  
   private func increaseSecurityLevelIfNeeded(for cause: SecurityChangeCause) {
-  guard securityLevel != .secure &&
+  guard
+             securityLevel != .secure &&
              allUsersTrusted &&
              allParticipantsHaveClients &&
-             conversationType != .connection else {
-  return
+             conversationType.isOne(of: .group, .oneOnOne, .invalid)
+  else {
+  return
          }
  
          securityLevel = .secure
  
  @@ -977,7 +977,7 @@ class ZMConversationTests_SecurityLevel: ZMConversationTestsBase {
   let otherUnverifiedUsers = self.setupUnverifiedUsers(count: 1)
  
   // THEN
-  XCTAssertEqual(conversation.allMessages.count, 2)
+  XCTAssertEqual(conversation.allMessages.count, 4)
   guard let lastMessage1 = conversation.lastMessage as? ZMSystemMessage else {
   return XCTFail()
          }
  @@ -988,7 +988,7 @@ class ZMConversationTests_SecurityLevel: ZMConversationTestsBase {
   _ = self.simulateAdding(users: otherUnverifiedUsers, conversation: conversation, by: selfUser)
  
   // THEN
-  XCTAssertEqual(conversation.allMessages.count, 3)
+  XCTAssertEqual(conversation.allMessages.count, 5)
   guard let lastMessage2 = conversation.lastMessage as? ZMSystemMessage else {
   return XCTFail()
          }
  @@ -1012,4 +1012,20 @@ class ZMConversationTests_SecurityLevel: ZMConversationTestsBase {
   XCTAssertEqual(conversation.securityLevel, .secure)
      }
  
+  func testThatSecurityLevelIsIncreased_WhenAddingSelfUserToAnExistingConversation() {
+  // given
+  let selfUser = ZMUser.selfUser(in: self.uiMOC)
+  self.createSelfClient(onMOC: self.uiMOC)
+  let conversation = ZMConversation.insertNewObject(in: self.uiMOC)
+         conversation.conversationType = .group
+         conversation.remoteIdentifier = UUID()
+ 
+ 
+  // when
+         conversation.addParticipantAndUpdateConversationState(user: selfUser, role: nil)
+ 
+  // then
+  XCTAssertEqual(conversation.securityLevel, .secure)
+     }
+ 
  }
  @@ -90,9 +90,7 @@ class ZMUserLegalHoldTests: ModelObjectsTests {
   // THEN
   XCTAssertEqual(selfUser.legalHoldStatus, .enabled)
   XCTAssertTrue(selfUser.needsToAcknowledgeLegalHoldStatus)
- 
-  let lastMessage = conversation.lastMessage as? ZMSystemMessage
-  XCTAssertEqual(lastMessage?.systemMessageType, .legalHoldEnabled)
+  XCTAssertTrue(conversation.allMessages.contains(where: { ($0 as? ZMSystemMessage)?.systemMessageType == .legalHoldEnabled }))
   XCTAssertTrue(conversation.isUnderLegalHold)
      }
  
  
