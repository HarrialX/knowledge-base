Original Source:
https://github.com/python-imaging/Pillow/commit/4e9f367dfd3f04c8f5d23f7f759ec12782e10ee7

Commit history:

  @@ -67,7 +67,8 @@ def Ghostscript(tile, size, fp, scale=1):
  
   import tempfile, os, subprocess
  
-  file = tempfile.mktemp()
+  out_fd, file = tempfile.mkstemp()
+  os.close(out_fd)
  
   # Build ghostscript command
   command = ["gs",
  
  @@ -495,14 +495,17 @@ def _copy(self):
   self.readonly = 0
  
   def _dump(self, file=None, format=None):
-  import tempfile
+  import tempfile, os
   if not file:
-  file = tempfile.mktemp()
+  f, file = tempfile.mkstemp(format or '')
+  os.close(f)
+ 
   self.load()
   if not format or format == "PPM":
   self.im.save_ppm(file)
   else:
-  file = file + "." + format
+  if file.endswith(format):
+  file = file + "." + format
   self.save(file, format)
   return file
  
  
  @@ -172,8 +172,8 @@ def load(self):
   self.fp.seek(offset)
  
   # Copy image data to temporary file
-  outfile = tempfile.mktemp()
-  o = open(outfile, "wb")
+  o_fd, outfile = tempfile.mkstemp(text=False)
+  o = os.fdopen(o_fd)
   if encoding == "raw":
   # To simplify access to the extracted file,
   # prepend a PPM header
  
  @@ -344,13 +344,17 @@ def load_djpeg(self):
   # ALTERNATIVE: handle JPEGs via the IJG command line utilities
  
   import tempfile, os
-  file = tempfile.mktemp()
-  os.system("djpeg %s >%s" % (self.filename, file))
+  f, path = tempfile.mkstemp()
+  os.close(f)
+  if os.path.exists(self.filename):
+  os.system("djpeg '%s' >'%s'" % (self.filename, path))
+  else:
+  raise ValueError("Invalid Filename")
  
   try:
-  self.im = Image.core.open_ppm(file)
+  self.im = Image.core.open_ppm(path)
   finally:
-  try: os.unlink(file)
+  try: os.unlink(path)
   except: pass
  
   self.mode = self.im.mode
  
