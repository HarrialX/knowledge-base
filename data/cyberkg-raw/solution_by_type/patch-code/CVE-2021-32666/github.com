Original Source:
https://github.com/wireapp/wire-ios-data-model/commit/35af3f632085f51a2ce7f608fdaeffd1a69ad89f

Commit history:

  @@ -250,20 +250,28 @@ extension ZMUser {
  
   public static var previewImageDownloadFilter: NSPredicate {
   let assetIdExists = NSPredicate(format: "(%K != nil)", ZMUser.previewProfileAssetIdentifierKey)
+  let assetIdIsValid = NSPredicate { (user, _) -> Bool in
+  guard let user = user as? ZMUser else { return false }
+  return user.previewProfileAssetIdentifier?.isValidAssetID ?? false
+         }
   let notCached = NSPredicate() { (user, _) -> Bool in
   guard let user = user as? ZMUser else { return false }
   return user.imageSmallProfileData == nil
          }
-  return NSCompoundPredicate(andPredicateWithSubpredicates: [assetIdExists, notCached])
+  return NSCompoundPredicate(andPredicateWithSubpredicates: [assetIdExists, assetIdIsValid, notCached])
      }
-  
+ 
   public static var completeImageDownloadFilter: NSPredicate {
   let assetIdExists = NSPredicate(format: "(%K != nil)", ZMUser.completeProfileAssetIdentifierKey)
+  let assetIdIsValid = NSPredicate { (user, _) -> Bool in
+  guard let user = user as? ZMUser else { return false }
+  return user.completeProfileAssetIdentifier?.isValidAssetID ?? false
+         }
   let notCached = NSPredicate() { (user, _) -> Bool in
   guard let user = user as? ZMUser else { return false }
   return user.imageMediumData == nil
          }
-  return NSCompoundPredicate(andPredicateWithSubpredicates: [assetIdExists, notCached])
+  return NSCompoundPredicate(andPredicateWithSubpredicates: [assetIdExists, assetIdIsValid, notCached])
      }
  
   public func updateAndSyncProfileAssetIdentifiers(previewIdentifier: String, completeIdentifier: String) {
  
  @@ -223,6 +223,19 @@ extension ZMUserTests_Swift {
   XCTAssertFalse(predicate.evaluate(with: user))
          }
      }
+ 
+  func testThatCompleteImageDownloadFilterDoesNotPickUpUsersWithInvalidAssetId() {
+         syncMOC.performGroupedBlockAndWait {
+  // GIVEN
+  let predicate = ZMUser.completeImageDownloadFilter
+  let user = ZMUser(remoteID: UUID.create(), createIfNeeded: true, in: self.syncMOC)
+             user?.completeProfileAssetIdentifier = "not+valid+id"
+             user?.setImage(data: "foo".data(using: .utf8), size: .complete)
+ 
+  // THEN
+  XCTAssertFalse(predicate.evaluate(with: user))
+         }
+     }
  
   func testThatPreviewImageDownloadFilterDoesNotPickUpUsersWithCachedImages() {
          syncMOC.performGroupedBlockAndWait {
  
