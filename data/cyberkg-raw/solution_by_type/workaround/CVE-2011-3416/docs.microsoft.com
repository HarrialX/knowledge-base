Original Source:
https://docs.microsoft.com/en-us/security-updates/securitybulletins/2011/ms11-100

Workarounds for Collisions in HashTable May Cause DoS Vulnerability - CVE-2011-3414
Workaround refers to a setting or configuration change that does not correct the underlying vulnerability but would help block known attack vectors before you apply the update. Microsoft has tested the following workarounds and states in the discussion whether a workaround reduces functionality:

Configuration-based workaround
The following workaround configures the limit of the maximum request size that ASP.NET will accept from a client. Decreasing the maximum request size will decrease the susceptibility of the ASP.NET server to a denial of service attack.
Note: Please back up your configuration before you make any changes to it.
This configuration value can be applied globally to all ASP.NET sites on a server by adding the entry to root web.config or applicationhost.config. Alternatively, this configuration can be restricted to a particular site or application by adding it to a web.config file for the particular site or application. For more information on ASP.NET configuration, please reference the MSDN article ASP.NET Configuration Overview.

If your application uses ViewState, add the following configuration in the appropriate ASP.NET configuration file to limit the maximum request size that ASP.NET will accept from a client to 200 KB.
<configuration>
    <system.web>
    <httpRuntime maxRequestLength="200”/>
    </system.web>
</configuration>


If your application does not use ASP.NET ViewState, add the following configuration in the appropriate ASP.NET configuration file to limit the maximum request size that ASP.NET will accept from a client to 20 KB.
<configuration>
    <system.web>
    <httpRuntime maxRequestLength="20”/>
    </system.web>
</configuration>



For more information on the maxRequestLength configuration option, please refer to MSDN documentation on the httpRuntime Element.
Note: Increasing the default HTTP querystring and request header size limits will increase the susceptibility of the server to the denial of service issue being described in this advisory. For more information about how to set these limits, see Http.sys registry settings for IIS.
Impact of workaround: Client requests that exceed the configured maxRequestLength will result in a ConfigurationErrorsException thrown on the server-side and an http error status returned to the client. The limits configured previously should be used as a baseline and can be adjusted to avoid application failures. Configuring the maxRequestLength value with a smaller value also reduces the server’s susceptibility to this particular denial of service. Applications that accept client file uploads and those that generate a large viewstate are examples of applications that may be impacted by this workaround.
After you apply this workaround, the following client request failure may appear in Application event log.
    Event code: 3004
    Event message: Post size exceeded allowed limits.
     Exception information:
          Exception type: HttpException     
          Exception message: Maximum request length exceeded.   
    at System.Web.HttpRequest.GetEntireRawContent()   
    at System.Web.HttpRequest.FillInFormCollection()   
    at System.Web.HttpRequest.get_Form()   
    at System.Web.HttpRequest.get_HasForm()   
    at System.Web.UI.Page.GetCollectionBasedOnMethod(Boolean dontReturnNull)   
    at System.Web.UI.Page.DeterminePostBackMode()  
    at System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint)

Alternatively, the request failure may result in the following entry in an IIS log file.
    #Fields: s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) sc-status sc-substatus sc-win32-status time-taken

    127.0.0.1 POST /webSite/Default.aspx - 80 - 127.0.0.1 - 500 0 0 1268

Removing workaround: To undo the workaround, remove the configuration sections that were added in this workaround or revert to a backup of the configuration before the workarounds.


Workarounds for Insecure Redirect in .NET Form Authentication Vulnerability - CVE-2011-3415
Workaround refers to a setting or configuration change that does not correct the underlying vulnerability but would help block known attack vectors before you apply the update. Microsoft has tested the following workarounds and states in the discussion whether a workaround reduces functionality:

Disable Forms Authentication in web.config

Open the application or global web.config file after taking a backup copy

Set the authentication mode to either Windows, Passport or None.
<system.web>

    <authentication mode="Windows | Passport | None" />

</system.web>

Details of each mode can be found at http://msdn.microsoft.com/en-us/library/aa291347(v=vs.71).aspx.
How to undo the workaround. 
Restore your web.config file from your backup copy.




Workarounds for ASP.Net Forms Authentication Bypass Vulnerability - CVE-2011-3416
Workaround refers to a setting or configuration change that does not correct the underlying vulnerability but would help block known attack vectors before you apply the update. Microsoft has tested the following workarounds and states in the discussion whether a workaround reduces functionality:

Set ticketCompatibilityMode to Framework40
This only applies to sites that are running ASP.NET 4 and newer because the ticketCompatibilityMode setting was introduced in ASP.NET v4.0.

Open the application or global web.config file after taking a backup copy

Set the ticketCompatibilityMode to Framework40. Note that the default value for this setting is "Framework20"
<system.web>
    <authentication mode="Forms">
    <forms ticketCompatibilityMode="Framework40" />
    </authentication>
</system.web>



How to undo the workaround. 
Restore your web.config file from your backup copy.

Disable Forms Authentication in web.config

Open the application or global web.config file after taking a backup copy

Set the authentication mode to either Windows, Passport or None.
<system.web>

  <authentication mode="Windows | Passport | None" />

</system.web>

Details of each mode can be found at http://msdn.microsoft.com/en-us/library/aa291347(v=vs.71).aspx.
How to undo the workaround. 
Restore your web.config file from your backup copy.




Workarounds for ASP.NET Forms Authentication Ticket Caching Vulnerability - CVE-2011-3417
Workaround refers to a setting or configuration change that does not correct the underlying vulnerability but would help block known attack vectors before you apply the update. Microsoft has tested the following workarounds and states in the discussion whether a workaround reduces functionality:

Restrict forms authentication cookies to SSL channels
Open the application or global web.config file after taking a backup copy.
Set requireSSL="true" on the <forms> element, as shown in the following code.
    <forms loginUrl="Secure\Login.aspx"
        requireSSL="true" />

How to undo the workaround. 
Restore your web.config file from your backup copy.

Disable sliding expiration for forms authentication cookies

Open the application or global web.config file after taking a backup copy

Set slidingExpiration="false" on the <forms> element, as shown in the following code.
<forms slidingExpiration="false"/>



Impact of workaround. Users would be forced to re-login after their tickets expire.
How to undo the workaround. 
Restore your web.config file from your backup copy.

Disable OutputCache

Back up your web application folder.
Remove all <%@ OutputCache %> directives in your web pages.
If your website is an MVC application, also remove all OutputCache attributes from your controller actions.

Impact of workaround. Users would be forced to re-login after their tickets expire.
How to undo the workaround. 
Restore your web application folder.


